#pragma once
#ifndef DRAKO_MOUSE_DEVICE_HPP
#define DRAKO_MOUSE_DEVICE_HPP

#include "drako/system/desktop_window.hpp"

#include <chrono>
#include <vector>

namespace drako
{
    enum class MouseAction : uint8_t
    {
        left_btn_press,   // button press
        left_btn_release, // button release
        left_btn_double,  // double click

        mid_btn_press,   // button press
        mid_btn_release, // button release
        mid_btn_double,  // double click

        right_btn_press,   // button press
        right_btn_release, // button release
        right_btn_double,  // double click
    };

    struct MousePosition
    {
        std::uint32_t x, y;
    };

    // Event generated when the user performs an action with the mouse.
    //
    class MouseEvent
    {
    public:
        explicit constexpr MouseEvent(
            MouseAction a, MousePosition p, std::chrono::milliseconds time) noexcept
            : _timestamp{ time }, _position{ p }, _action{ a } {}

        [[nodiscard]] constexpr MousePosition
        cursor_local_position() const noexcept { return _position; }

        [[nodiscard]] constexpr auto
        local_timestamp() const noexcept { return _timestamp; }

    private:
        std::chrono::milliseconds _timestamp; // Timestamp of the event.
        MousePosition             _position;  // Screen position of the cursor.
        MouseAction               _action;    // Action performed by the user.
    };


     /// @brief Event generated by the mouse buttons.
    ///
    /// This type of events is generated when the user interacts
    /// with the left/right mouse buttons.
    /// 
    struct MousePressEvent
    {
        std::chrono::milliseconds timestamp;
        MousePosition             position;
        MouseAction               action;
    };

    /// @brief Event generated by the mouse wheel.
    ///
    /// This type of events is generated when the user interacts
    /// with the mouse scroll wheel.
    /// 
    struct MouseWheelEvent
    {
        using Delta = std::uint32_t;

        /// @brief Timestamp of the event.
        std::chrono::milliseconds timestamp;

        /// @brief Screen coordinates of the cursor.
        MousePosition position;

        /// @brief Delta rotation of the wheel.
        Delta delta;
    };


    // Event generated at every update that tracks the state of the mouse.
    //
    //struct MouseTrackEvent {};


    /// @brief OS interface with mouse device.
    class MouseDevice
    {
    public:
        // using mouse_event_handler = void(*)(const mouse_action_event&);

#if defined(_WIN32)
        explicit MouseDevice() = default;


        //explicit MouseDevice(const sys::UniqueDesktopWindow& context) noexcept
        //    : _context(context) {}
#endif
        MouseDevice(const MouseDevice&) = delete;
        MouseDevice& operator=(const MouseDevice&) = delete;

        void poll_state();

        struct EventJournal
        {
            //std::vector<MouseTrackEvent> track;
            std::vector<MousePressEvent> press;
            std::vector<MouseWheelEvent> wheel;
        };
        [[nodiscard]] EventJournal poll_events();

        void syntetize(const MousePressEvent& e);
        //void syntetize(const MouseTrackEvent& e);
        void syntetize(const MouseWheelEvent& e);

    private:
#if defined(_WIN32)
        // TODO: remove possible dangling reference, use unmanaged handle
        //const sys::UniqueDesktopWindow _context;
#endif
    };

} // namespace drako

#endif // !DRAKO_MOUSE_DEVICE_HPP